apply plugin: 'com.android.application'

apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest'){

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file ("${buildDir}/jacocoHtml")
    }

    def fileFilter = ['**/R.class',
                      '**/R$.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(mainSrc)
    getClassDirectories().setFrom(debugTree)
    getExecutionData().setFrom("$buildDir/test/jacoco/jacocoTest.exec")

    // executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

jacoco {
    toolVersion = "0.8.1"
}

tasks.withType(Test){
    jacoco.includeNoLocationClasses = true
}

android {

    compileSdkVersion 28
    buildToolsVersion = '28.0.3'
    defaultConfig {
        applicationId "com.example.theshayds.mynewstest"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/*'
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //noinspection GroovyUnusedAssignment
    def nav_version = "1.0.0-alpha09"
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-media-compat:28.0.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'junit:junit:4.12'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.5'

    // RETROFIT
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    // RECYCLER VIEW
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    // ButterKnife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'com.android.support:support-v4:28.0.0'

    // CardView
    implementation 'com.android.support:cardview-v7:28.0.0'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'

    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.2.0'

    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:2.10.0'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}
